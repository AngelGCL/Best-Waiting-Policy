package dataManagement;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

import useful_classes.Set2;

/**
 * File Generator class made for testing purposes.
 * @author Angel G. Carrillo Laguna
 *
 */
public class FileGenerator {
	
	private int numFiles;
	private int maxSize;
	private Random rnd;
	
	/**
	 * Constructor method.
	 * @param numFiles number of files to be generated.
	 * @param maxSize max number of clients that can be generated into the files.
	 */
	public FileGenerator(int numFiles, int maxSize){
		
		this.maxSize = maxSize;
		this.numFiles = numFiles;
		rnd = new Random();
	}
	
	
	/**
	 * Generates data to write into File. 
	 * @return Two dimensional {@link Client} array with the amount of files to be generated and each file has a random number of Clients.
	 * 
	 */
	public Client[][] genData(){
		Client[][] data = new Client[numFiles][];
		for(int i=0; i<numFiles; i++){
			int size = rnd.nextInt(maxSize + 1);
			ArrayList<Client> jarr = new ArrayList<Client>();
			for(int j=0; j<size; j++){
				int arrival = rnd.nextInt(20);
				int serviceT = rnd.nextInt(20);
				if(serviceT < 1)
					serviceT = 1;
				jarr.add(new Client(arrival, serviceT));//can be changed
			}
			Collections.sort(jarr);
			data[i] = jarr.toArray(new Client[jarr.size()]);
		}
		return data;
		
	}
	
	/**
	 * Generates the data_i.txt files and inserts them into the inputFiles directory. Each 
	 * file has a random amount of inputs.
	 * @throws FileNotFoundException
	 */
	public void genData_i() throws FileNotFoundException{
		String parentDirectory = "inputFiles";
		Client[][] jb = genData();
		for(int i=0; i<numFiles; i++){
			String fileName = "data_" + (i+1) + ".txt"; 
			PrintWriter out = new PrintWriter(new File(parentDirectory, fileName));
			for(int j=0; j<jb[i].length; j++){
				out.println(jb[i][j]);
			}
			out.close();
		}
	}
	
	/**
	 * Generates the dataFiles.txt file. Which will have several names of the data_i.txt files.
	 * It will write the names as such: "data_i". Without the ".txt" at the end. This is to facilitate
	 * the reading of such files and write a corresponding outputFile for each.
	 * @param n amount of names to be written in the file.
	 * @throws FileNotFoundException
	 */
	public void genDataFiles(int n) throws FileNotFoundException{
		String dataFile = "dataFiles.txt";
		PrintWriter out = new PrintWriter(new File("inputFiles", dataFile));
		Set2<String> set = new Set2<String>();//prevents repeats FAULT: if repeat is made, the list of files will be shorter.
		for(int i=0; i<n; i++){//can be changed
			String fileName = "data_" + rnd.nextInt(numFiles + numFiles/3);
			set.add(fileName);
		}
		for(String s : set)
			out.println(s);
		
		out.close();
	}
	
	/**
	 * Method used as the main File Generator method. Used for testing purposes.
	 * @param n amount of file names to be generated by {@link genDataFiles()} method.
	 * @throws FileNotFoundException
	 */
	public void generateFiles(int n) throws FileNotFoundException{
		genData_i();
		genDataFiles(n);//amount can be changed
	}

}
